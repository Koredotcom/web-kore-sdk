import './styles/kore-widgets.css';
declare class KoreWidgetSDK {
    vars: any;
    events: any;
    config: any;
    constructor(config: any);
    jqueryManupulations(): void;
    initVariables(): void;
    attachEventListener(): void;
    show(config: any): void;
    formAction(event: any): void;
    maintainCache(): void;
    modifyJSON(count: any): void;
    getTemplate(type: any): string | undefined;
    bindWidgetEvent(): void;
    openDropdown(data: any): void;
    openPanel(panelName: any, resPopUp: any, heightToggle: any): false | undefined;
    checkWidgetSwitchEditor(newPanel: any, oldPanel: any): boolean;
    prepareRenderData(panelName: any): void;
    getServerDataGen(url: any, method: any, payload: any, _params: any): any;
    getServerData(url: any, method: any, payload: any, _params: any, passedJson: any): any;
    getCacheDataByWidgetId(widgetId: any): any;
    getPanelDataByPanelId(panelId: any): any;
    getWidgetDataByWidgetId(widgetId: any): undefined;
    openCloseBottomOverlayContainer(open: any, htmlData: any): void;
    applySortingAndFilter(e: any, bindingData: any, sortInputs: any): void;
    applySorting(e: any, $ele: any, templateType: any, bindingData: any): void;
    openWidgetFilters(e: any, ele: any, templateType: any, bindingData: any): void;
    bindTemplateEvents(ele: any, templateType: any, bindingData: any): void;
    getHTMLTemplate(responseData: any, xhrObject: any): any;
    prepereWidgetHeader(responseData: any, xhrObject: any): void;
    renderTemplate(responseData: any, xhrObject: any): void;
    resolveUrl(toResolveUrl: any, values: any, deleteProp: any): any;
    getResolveMeeting(obj: any): any;
    filterTabs(parentId: any, subpanelId: any, filterId: any): void;
    viewMorePanel(obj: any): void;
    scrollData(paneldata: any, filterdata: any, panelType: any, e: any): void;
    scrollServerData(url: any, method: any, payload: any, passedJson: any, e: any, viewMoredata: any, panelType: any): any;
    mergedata(oldJson: any, newJson: any): any;
    setChatFocus(): void;
    removeViewMore(): void;
    getColumnWidth(width: any): any;
    refreshElement(panelDetails: any, refreshFullpanel: any, widgetData?: any): void;
    refreshWidgetData(widgetData: any, time: any, panelDetail: any): void;
    clearWidgetPolling(widgetData: any): void;
    startWidgetPolling(widgetData: any, currTime: any, givenTime: any, panelDetail: any): void;
    refreshData(panelName: any, time: any): void;
    startPolling(panelName: any, currTime: any, givenTime: any): void;
    resetTask(): void;
    meetingTimer(tdata: any, m_Data: any, index: any): any;
    startTimer(mObj: any): void;
    passHashTag(uttarence: any): void;
    openArticle(kId: any): void;
    openAnnouncement(kId: any): void;
    openLink(url: any): void;
    passTaskUtterances(e: any, actionIndex: any): void;
    passUtterances(idss: any, message: any, evt: any): void;
    triggerEvent(eventName: any, data: any): void;
    triggerAction(actionObj: any, postData: any): void;
    checkCurrentUser(oId: any, aId: any): boolean;
    categoriseMeetingDayWise(mData: any): void;
    showDropdown(obj: any): void;
    addArticleAnnouncement(type: any): void;
    passMeetingUtterances(_this: any): void;
    meetingAction(actionObj: any, mainObj: any): void;
    taskkAction(tId: any, taskName: any, e: any): void;
    removeTaskSelection(): void;
    taskSend(type: any): void;
    taskCheckbox(taskId: any): boolean;
    sendTaskAction(type: any, actionPlace: any): void;
    popupAction(data: any, title: any, _this: any): void;
    createPopup(content: any, actionObj: any, mainObj: any): void;
    toggelMeetingActionBtn(id: any, e: any): void;
    hexToRGBMeeting(hex: any, alpha: any): string;
    isURL(str: any): {
        status: boolean;
        location: any;
    };
    getTemplateMethods(): any;
    openPanelForWindow(panelName: any, resPopUp: any, heightToggle: any): void;
    filterTabsForWindow(parentId: any, subpanelId: any, filterId: any): void;
    viewMorePanelForWindow(obj: any): void;
    scrollDataForWindow(paneldata: any, filterdata: any, panelType: any, e: any): void;
    removeViewMoreForWindow(): void;
    meetingTimerForWindow(tdata: any, m_Data: any, index: any): void;
    passHashTagForWindow(uttarence: any): void;
    openArticleForWindow(kId: any): void;
    openAnnouncementForWindow(kId: any): void;
    openLinkForWindow(url: any): void;
    passTaskUtterancesForWindow(e: any, actionIndex: any): void;
    passUtterancesForWindow(idss: any, message: any, evt: any): void;
    checkCurrentUserForWindow(oId: any, aId: any): void;
    showDropdownForWindow(obj: any): void;
    addArticleAnnouncementForWindow(type: any): void;
    refreshElementForWindow(type: any, refreshType: any): void;
    passMeetingUtterancesForWindow(_this: any): void;
    taskkActionForWindow(tId: any, taskName: any, e: any): void;
    removeTaskSelectionForWindow(): void;
    taskSendForWindow(type: any): void;
    taskCheckboxForWindow(taskId: any): void;
    popupActionForWindow(data: any, title: any, _this: any): void;
    toggelMeetingActionBtnForWindow(id: any, e: any): void;
    hexToRGBMeetingForWindow(hex: any, alpha: any): void;
    isURLForWindow(str: any): void;
    getMeetingSlot(duration: any): {
        start: any;
        end: any;
    }[];
    getDateArray(start: any, end: any): any[];
    cloneMessage1(obj: any): any;
    compare(a: any, b: any): number;
    init(config: any): void;
    setJWT(jwtToken: any): void;
    extend(target: any, source: any): any;
}
export default KoreWidgetSDK;
